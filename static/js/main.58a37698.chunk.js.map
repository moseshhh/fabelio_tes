{"version":3,"sources":["Component/CheckboxItem.jsx","Component/DataView.jsx","Component/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["CheckboxItem","f_handleChange","e","props","checkedItem","MenuItem","Grid","container","direction","justify","alignItems","item","this","title","Checkbox","value","values","checked","isChecked","onChange","ev","React","Component","colortheme","createMuiTheme","palette","primary","main","contrastText","secondary","DataView","componentDidMount","setState","products","classes","className","cardroot","spacing","map","el","console","log","theme","xs","lg","md","Paper","paper","Card","CardContent","Typography","gutterBottom","variant","component","name","style","color","price","description","marginTop","marginBottom","furniture_style","join","textAlign","delivery_time","withStyles","root","flexGrow","customizeToolbar","minHeight","textInput","formControl","minWidth","abc","marginRight","maxWidth","margin","priceText","Navbar","fetchData","fetch","then","res","json","data","furnitureStyles","furniture_styles","filtered_product","catch","err","handleChange","column","target","state","query","includes","new_query","filter","handleQuery","handleSearchString","searchString","filtered_data","styles","length","newdata","some","arr","delivery","toInt","parseInt","maxDelivTime","Math","max","toLowerCase","generateCard","deliveryTime","AppBar","position","Toolbar","TextField","label","inputProps","placeholder","FormControl","InputLabel","id","Select","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58a37698.chunk.js","sourcesContent":["import React from 'react'\nimport {MenuItem, Grid, Checkbox} from '@material-ui/core'\n\n\n// const CheckboxItem = (props)=>{\n    // console.log(props)\n\nclass CheckboxItem extends React.Component{\n    f_handleChange = (e)=>{\n        this.props.checkedItem(e)\n    }\n\n    render(){\n        return(\n            <MenuItem>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"space-between\"\n                    alignItems=\"flex-start\">\n                    <Grid item>\n                        <span>{this.props.title}</span>\n                    </Grid>\n                    <Grid item>\n                        <Checkbox\n                            value={this.props.values}\n                            checked={this.props.isChecked }\n                            onChange={(ev)=>this.f_handleChange(ev)}\n                            />\n                    </Grid>\n                </Grid>\n            </MenuItem>\n        )\n    }\n}\n\nexport default CheckboxItem","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport {AppBar, Toolbar, Typography, TextField, Grid, FormControl, InputLabel, Select, MenuItem, Checkbox, Paper, FormControlLabel} from '@material-ui/core'\n\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    customizeToolbar: {\n        minHeight: 120,\n    },\n    textInput : {\n        color : 'white'\n    },\n    formControl : {\n        minWidth : 400\n    },\n    abc : {\n        marginRight : 200\n    },\n    cardroot: {\n        flexGrow: 1,\n        maxWidth :'100%',\n    },\n    paper : {\n        margin : 12\n    },\n    priceText : {\n        color : \"green\"\n    }\n  \n})\n\nconst colortheme = createMuiTheme({\n    palette: {\n      primary: { main: \"#e91e63\", contrastText: \"#fff\" },\n      secondary: { main: \"#03a9f4\", contrastText: \"#fff\" }\n    }\n  });\n\nclass DataView extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    \n    componentDidMount = ()=>{\n        this.setState({\n            products : this.props.products\n        })\n    }\n    \n    render(){\n        const { classes } = this.props;\n        return(\n            <div className={classes.cardroot}>\n                <Grid container justify=\"space-between\" direction=\"row\" alignItems=\"flex-start\" spacing={2}>\n                    {\n                        this.props.products.map(\n                            el=>{\n                                console.log(el)\n                                return(\n                                    <MuiThemeProvider theme={colortheme}>\n                                    <Grid item xs={6} lg={6} md={6}>\n                                        <Paper className={classes.paper}>\n                                            <Card >\n                                                <CardContent>\n                                                    <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"flex-start\">\n                                                        <Grid item>\n                                                            <Typography gutterBottom variant=\"headline\" component=\"h3\">\n                                                                {el.name}\n                                                            </Typography>\n                                                        </Grid>\n                                                        <Grid item>\n                                                            <div style={{color : \"green\"}}>\n                                                                {/* <Typography gutterBottom color=\"initial\" classes={classes.priceText} component=\"h5\"> */}\n                                                                    {el.price}\n                                                                {/* </Typography> */}\n                                                            </div>\n                                                        </Grid>\n                                                    </Grid>\n                                                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                                        {el.description}\n                                                    </Typography>\n                                                    <div  style={{color : \"blue\", marginTop : '10px', marginBottom : '10px'}}>\n                                                        {el.furniture_style.join(\" \")}\n                                                    </div>\n                                                    <div  style={{color : \"blue\", marginTop : '10px', marginBottom : '10px', textAlign : 'right'}}>\n                                                        {`${el.delivery_time} days`}\n                                                    </div>\n                                                </CardContent>\n                                            </Card>\n                                        </Paper>\n                                    </Grid>\n                                    </MuiThemeProvider>\n                                )\n                            }\n                        )\n                    }\n                </Grid>\n            </div>\n        )\n    }\n\n}\n\nexport default withStyles(styles) (DataView)","import React, { useState } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { AppBar, Toolbar, Typography, TextField, Grid, FormControl, InputLabel, Select, MenuItem, Checkbox, FormControlLabel } from '@material-ui/core'\n\nimport CheckboxItem from './CheckboxItem'\nimport DataView from './DataView'\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    customizeToolbar: {\n        minHeight: 120,\n    },\n    textInput: {\n        color: 'white'\n    },\n    formControl: {\n        minWidth: 400\n    },\n    abc: {\n        marginRight: 200\n    },\n    cardroot: {\n        flexGrow: 1,\n        maxWidth: '100%',\n    },\n    paper: {\n        margin: 12\n    }\n\n})\n\nconst API_URL = 'https://www.mocky.io/v2/5c9105cb330000112b649af8'\n\nclass Navbar extends React.Component {\n\n    constructor(props) {\n        super()\n        this.state = {\n            furnitureStyles: [],\n            deliveryTime: [\n                {\n                    title :'1 week',\n                    value : \"7\"\n                },     \n                {\n                    title :'2 week',\n                    value : \"14\"\n                },     \n                {\n                    title :'1 month',\n                    value : \"30\"\n                },     \n                {\n                    title :'more',\n                    value : \"1000\"\n                },     \n            ],\n            products: [],\n            filtered_product : [],\n            query: {\n                styles: [],\n                delivery: [],\n                searchString: ''\n            }\n        }\n\n        this.fetchData()\n    }\n\n    fetchData = () => {\n        fetch(API_URL)\n            .then((res) => res.json())\n            .then((data) => {\n                this.setState({\n                    furnitureStyles: data.furniture_styles,\n                    products: data.products,\n                    filtered_product : data.products\n                })\n            })\n            .catch(err => console.log('error', err))\n    }\n\n    handleChange = (ev, column) => {\n        if (ev.target.checked) {\n            if (!this.state.query[column].includes(ev.target.value)) {\n                let new_query = this.state.query\n                new_query[column] = [...this.state.query[column], ev.target.value]\n                this.setState({\n                    query: new_query\n                })\n            }\n        }\n        else {\n            let new_query = this.state.query\n            new_query[column] = new_query[column].filter(el => { return el !== ev.target.value })\n            this.setState({\n                query: new_query\n            })\n        }\n        this.handleQuery()\n    }\n\n    handleSearchString = (ev) => {\n        if (ev.target.value) {\n            let query = { ...this.state.query }\n            query.searchString = ev.target.value\n            this.setState({ query }, ()=> this.handleQuery())\n        } else {\n            let query = { ...this.state.query }\n            query.searchString = ''\n            this.setState({ query }, ()=>this.handleQuery())\n        }\n        \n    }\n\n    handleQuery = ()=>{\n        var filtered_data = [...this.state.products]\n        var query = this.state.query\n        if (this.state.query.styles.length > 0) {\n            let newdata = filtered_data.filter((el) => { \n                return this.state.query.styles.some(arr=>el.furniture_style.includes(arr))\n            })\n            filtered_data = newdata\n        }\n        if (query.delivery.length > 0) {\n            let toInt = query.delivery.map((value)=>parseInt(value))\n            let maxDelivTime = Math.max(...toInt)\n            let newdata = filtered_data.filter((el) => {\n                return parseInt(el.delivery_time) <= maxDelivTime\n            })\n            filtered_data = newdata\n        }\n        if (this.state.query.searchString) {\n            let newdata = filtered_data.filter((el) => {\n                    return el.name.toLowerCase().includes(this.state.query.searchString)              \n            })\n            filtered_data = newdata\n        }\n        this.setState({ filtered_product: filtered_data })\n    }\n\n    generateCard=()=>{\n        return <DataView products={this.state.filtered_product}/>\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <div>\n                    <AppBar position=\"static\" >\n                        <Toolbar className={classes.customizeToolbar}>\n                            <div className={classes.root}>\n                                <Grid container spacing={3}>\n                                    <Grid item xs>\n                                        <TextField\n                                            label=\"Search Furniture\"\n                                            color=\"secondary\"\n                                            onChange={this.handleSearchString}\n                                            inputProps={{ className: classes.textInput }}\n                                            placeholder=\"Search\" />\n                                    </Grid>\n                                </Grid>\n                                <Grid container>\n                                    <Grid item xs>\n                                        <FormControl className={classes.formControl}>\n                                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                                Furniture Styles\n                                        </InputLabel>\n                                            <Select>\n                                                {\n                                                    this.state.furnitureStyles.map(\n                                                        (el) => {\n                                                            return (\n                                                                <CheckboxItem\n                                                                    title={el}\n                                                                    values={el}\n                                                                    isChecked={this.state.query.styles.includes(el)}\n                                                                    checkedItem={(ev) => this.handleChange(ev, 'styles')} />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Select>\n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item xs>\n                                        <FormControl className={classes.formControl}>\n                                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                                Delivery Time\n                                        </InputLabel>\n                                            <Select>\n                                                {\n                                                    this.state.deliveryTime.map(\n                                                        (el) => {\n                                                            return (\n                                                                <CheckboxItem\n                                                                    title={el.title}\n                                                                    values={el.value}\n                                                                    isChecked={this.state.query.delivery.includes(el.value)}\n                                                                    checkedItem={(ev) => this.handleChange(ev, 'delivery')} />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Select>\n                                        </FormControl>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Toolbar>\n                    </AppBar>\n                </div>\n                \n                {\n                    this.state.filtered_product.length > 0 ? this.generateCard()\n                     : null\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(Navbar)","import React from 'react';\nimport Navbar from './Component/Navbar'\n\nfunction App() {\n  return (\n    <Navbar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
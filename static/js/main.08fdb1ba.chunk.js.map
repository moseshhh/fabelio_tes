{"version":3,"sources":["Component/CheckboxItem.jsx","Component/DataView.jsx","Component/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["CheckboxItem","f_handleChange","e","props","checkedItem","MenuItem","Grid","container","direction","justify","alignItems","item","this","title","Checkbox","value","values","checked","isChecked","onChange","ev","React","Component","DataView","state","products","console","log","classes","className","cardroot","spacing","map","el","xs","lg","md","Paper","paper","Card","CardContent","Typography","gutterBottom","variant","component","CardActions","withStyles","theme","root","flexGrow","customizeToolbar","minHeight","textInput","color","formControl","minWidth","abc","marginRight","maxWidth","margin","Navbar","fetchData","fetch","then","res","json","data","setState","furnitureStyles","furniture_styles","catch","err","handleChange","column","target","query","includes","new_query","filter","handleQuery","handleSearchString","searchString","filtered_data","styles","length","newdata","some","arr","furniture_style","name","filtered_product","deliveryTime","delivery","AppBar","position","Toolbar","TextField","label","inputProps","placeholder","FormControl","InputLabel","id","Select","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08fdb1ba.chunk.js","sourcesContent":["import React from 'react'\nimport {MenuItem, Grid, Checkbox} from '@material-ui/core'\n\n\n// const CheckboxItem = (props)=>{\n    // console.log(props)\n\nclass CheckboxItem extends React.Component{\n    f_handleChange = (e)=>{\n        this.props.checkedItem(e)\n    }\n\n    render(){\n        return(\n            <MenuItem>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"space-between\"\n                    alignItems=\"flex-start\">\n                    <Grid item>\n                        <span>{this.props.title}</span>\n                    </Grid>\n                    <Grid item>\n                        <Checkbox\n                            value={this.props.values}\n                            checked={this.props.isChecked }\n                            onChange={(ev)=>this.f_handleChange(ev)}\n                            />\n                    </Grid>\n                </Grid>\n            </MenuItem>\n        )\n    }\n}\n\nexport default CheckboxItem","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport {AppBar, Toolbar, Typography, TextField, Grid, FormControl, InputLabel, Select, MenuItem, Checkbox, Paper, FormControlLabel} from '@material-ui/core'\n\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    customizeToolbar: {\n        minHeight: 120,\n    },\n    textInput : {\n        color : 'white'\n    },\n    formControl : {\n        minWidth : 400\n    },\n    abc : {\n        marginRight : 200\n    },\n    cardroot: {\n        flexGrow: 1,\n        maxWidth :'100%',\n    },\n    paper : {\n        margin : 12\n    }\n  \n})\n\nclass DataView extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            products : this.props.products\n        }\n        console.log(this.props)\n    }\n\n    render(){\n        const { classes } = this.props;\n        return(\n            <div className={classes.cardroot}>\n                    <Grid container justify=\"center\" direction=\"row\" alignItems=\"flex-start\" spacing={2}>\n\n                                {this.state.products.map(\n                                    el=>{\n                                        console.log(el)\n                                        return(\n                                            <Grid item xs={6} lg={6} md={6}>\n                                                <Paper className={classes.paper}>\n                                                    <Card >\n                                                        <CardContent>\n                                                        <Typography gutterBottom variant=\"headline\" component=\"h2\">\n                                                            julaiha\n                                                        </Typography>\n                                                        <Typography component=\"p\">\n                                                            Lorem ipsum, dolor sit amet consectetur adipisicing elit. Architecto possimus voluptatum numquam alias, delectus quasi recusandae illo consequuntur maxime error! Eaque ipsa architecto tempora. Ea dolorum saepe expedita magnam? Obcaecati.\n                                                        </Typography>\n                                                        </CardContent>\n                                                        <CardActions>\n                                                        </CardActions>\n                                                    </Card>\n\n                                                </Paper>\n                                            </Grid>\n                                        )\n                                    }\n                                )}\n\n                    </Grid>\n\n                </div>\n        )\n    }\n\n}\n\nexport default withStyles(styles) (DataView)","import React, { useState } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { AppBar, Toolbar, Typography, TextField, Grid, FormControl, InputLabel, Select, MenuItem, Checkbox, FormControlLabel } from '@material-ui/core'\n\nimport CheckboxItem from './CheckboxItem'\nimport DataView from './DataView'\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    customizeToolbar: {\n        minHeight: 120,\n    },\n    textInput: {\n        color: 'white'\n    },\n    formControl: {\n        minWidth: 400\n    },\n    abc: {\n        marginRight: 200\n    },\n    cardroot: {\n        flexGrow: 1,\n        maxWidth: '100%',\n    },\n    paper: {\n        margin: 12\n    }\n\n})\n\nconst API_URL = 'https://www.mocky.io/v2/5c9105cb330000112b649af8'\n\nclass Navbar extends React.Component {\n\n    constructor(props) {\n        super()\n        this.state = {\n            furnitureStyles: [],\n            deliveryTime: ['1 week', '2 weeks', '1 month', 'more'],\n            products: [],\n            filtered_product : [],\n            query: {\n                styles: [],\n                delivery: [],\n                searchString: ''\n            }\n        }\n\n        this.fetchData()\n    }\n\n    fetchData = () => {\n        fetch(API_URL)\n            .then((res) => res.json())\n            .then((data) => {\n                this.setState({\n                    furnitureStyles: data.furniture_styles,\n                    products: data.products\n                })\n            })\n            .catch(err => console.log('error', err))\n    }\n\n    handleChange = (ev, column) => {\n        if (ev.target.checked) {\n            if (!this.state.query[column].includes(ev.target.value)) {\n                let new_query = this.state.query\n                new_query[column] = [...this.state.query[column], ev.target.value]\n                this.setState({\n                    query: new_query\n                })\n            }\n        }\n        else {\n            let new_query = this.state.query\n            new_query[column] = new_query[column].filter(el => { return el !== ev.target.value })\n            this.setState({\n                query: new_query\n            })\n        }\n\n        this.handleQuery()\n    }\n\n    handleSearchString = (ev) => {\n        if (ev.target.value) {\n            let query = { ...this.state.query }\n            query.searchString = ev.target.value\n            this.setState({ query })\n        } else {\n            let query = { ...this.state.query }\n            query.searchString = ''\n            this.setState({ query })\n        }\n        this.handleQuery()\n    }\n\n    handleQuery = ()=>{\n        var filtered_data = [...this.state.products]\n        console.log(this.state.query.styles)\n        if (this.state.query.styles.length > 0) {\n            let newdata = filtered_data.filter((el) => { \n                return this.state.query.styles.some(arr=>el.furniture_style.includes(arr))\n            })\n            filtered_data = newdata\n            console.log(newdata)\n        }\n        // if (this.state.query.delivery.length > 0) {\n        //     let newdata = filtered_data.filter((el) => {\n        //         return this.state.query.category.includes(el.type)\n        //     })\n        //     filtered_data = newdata\n        // }\n        if (this.state.query.searchString) {\n            let newdata = filtered_data.filter((el) => {\n                if (el.name) {\n                    return el.name.includes(this.state.query.searchString)\n                }\n                else {\n                    return false\n                }\n            })\n            filtered_data = newdata\n            console.log(newdata)\n        }\n\n        this.setState({ filtered_product: filtered_data })\n    }\n\n    render() {\n        console.log(this.state.products)\n        const { classes } = this.props;\n        return (\n            <div>\n                <div>\n                    <AppBar position=\"static\" >\n                        <Toolbar className={classes.customizeToolbar}>\n                            <div className={classes.root}>\n                                <Grid container spacing={3}>\n                                    <Grid item xs>\n                                        <TextField\n                                            label=\"Search Furniture\"\n                                            color=\"secondary\"\n                                            onChange={this.handleSearchString}\n                                            inputProps={{ className: classes.textInput }}\n                                            placeholder=\"Search\" />\n                                    </Grid>\n                                </Grid>\n                                <Grid container>\n                                    <Grid item xs>\n                                        <FormControl className={classes.formControl}>\n                                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                                Furniture Styles\n                                        </InputLabel>\n                                            <Select>\n                                                {\n                                                    this.state.furnitureStyles.map(\n                                                        (el) => {\n                                                            return (\n                                                                <CheckboxItem\n                                                                    title={el}\n                                                                    values={el}\n                                                                    isChecked={this.state.query.styles.includes(el)}\n                                                                    checkedItem={(ev) => this.handleChange(ev, 'styles')} />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Select>\n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item xs>\n                                        <FormControl className={classes.formControl}>\n                                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                                Delivery Time\n                                        </InputLabel>\n                                            <Select>\n                                                {\n                                                    this.state.deliveryTime.map(\n                                                        (el) => {\n                                                            return (\n                                                                <CheckboxItem\n                                                                    title={el}\n                                                                    values={el}\n                                                                    isChecked={this.state.query.delivery.includes(el)}\n                                                                    checkedItem={(ev) => this.handleChange(ev, 'delivery')} />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Select>\n                                        </FormControl>\n\n                                    </Grid>\n                                </Grid>\n\n                            </div>\n                        </Toolbar>\n                    </AppBar>\n                </div>\n                {\n                    this.state.products ? <DataView products={this.state.products} /> : null\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(Navbar)","import React from 'react';\nimport Navbar from './Component/Navbar'\n\nfunction App() {\n  return (\n    <Navbar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}